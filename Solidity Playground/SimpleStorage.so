// SPDX-License-Identifier: GPL-3.0

pragma solidity >=0.6.0 <0.9.0;

contract SimpleStorage {

    // this will get initialialized to 0!
    uint256 public favoriteNumber;

    
    // the store function changes the value of favoriteNumber to _favoriteNumber
    function store(uint256 _favoriteNumber) public{
        favoriteNumber = _favoriteNumber;
    }
    
    // struct is a new way to define types in Solidity.
    struct People {
        uint256 favoriteNumber;
        string name;
    }
    
    // People[] is the type, people is the name of the array
    People[] public people;
    mapping(string => uint256) public nameToFavoriteNumber;


    //  view, pure are non state-changing functions (don't have to make a transaction on)
    // view is a viewing function; pure is a mathematical function
    function retrieve() public view returns(uint256) {
        return favoriteNumber;
    }

    function addPerson(string memory _name, uint256 _favoriteNumber) public{
        //Use the method .push to add to arrays
        people.push(People(_favoriteNumber, _name));
        nameToFavoriteNumber[_name] = _favoriteNumber;
    } 
      

}
